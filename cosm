#!/bin/bash

# cosm semver number
VERSION="0.1.0"

# load common and commands
set -e
export COSM_DIR=$(cd $(dirname $0) && pwd)

# check use of zprofile or bash_profile
set_bash_profile() {
    if test -f "${HOME}/.bash_profile"; then
        echo "${HOME}/.bash_profile" # linux, intel macos
    elif test -f "${HOME}/.zprofile"; then
        echo "${HOME}/.zprofile" # m-series macos
    else
        exit 1
    fi
    exit 0
}

# add the depot to the home folder and add it to the lua path
create_depot(){
    local depotpath=$1
    local prof=$2
    if [ -z "${COSM_DEPOT_PATH}" ]; then
        echo "Press any key to install the depot in ${depotpath}"
        read -n 1 key

        # create depot
        mkdir "${depotpath}"
        cd "${depotpath}"
        mkdir clones packages dev compiled registries

        # copy lua file that helps with package import 
        git clone git@github.com:renehiemstra/Cosm.git .cosm

        # prepare registry List.lua
        echo "local List = {}" >> registries/List.lua
        echo "return List" >> registries/List.lua
        
        # add the depot path to your profile
        echo "The depot is set and ready for use."
        echo "export COSM_DEPOT_PATH=\"$depotpath\"" >> ${prof}
    
        # append COSM_DEPOT_PATH to the LUA_PATH and add to your profile
        if [ -z "${LUA_PATH}" ]; then
            echo "export LUA_PATH=\"${depotpath}/?.lua;${COSM_DIR}/?.lua;;\"" >> ${prof}
        else
            echo "export LUA_PATH=\"${depotpath}/?.lua;${COSM_DIR}/?.lua;${LUA_PATH}\"" >> ${prof}
        fi
        echo "Open a new terminal window to continue."
        exit 0
    fi
}

# check that cosm package or registry name consists of letters only
checkname(){
    if [[ "$1" =~ [^a-zA-Z] ]]; then
        printf "cosm: '$1' is not a valid name. See 'cosm --help'.\n \n"
        exit 1
    fi
}

status(){
    lua $COSM_DIR/cli/cmd-status.lua status
}

init(){
    checkname $1
    lua $COSM_DIR/cli/cmd-init.lua $PWD "${@}"
}

add(){
    if [ "$#" -eq 2 ]; then
        option="${2}"
        if [ "${option}" == "--latest" ]; then
            lua $COSM_DIR/cli/cmd-add-latest.lua $PWD "${1}"
        elif [ "${option:0:1}" == "v" ]; then
            lua $COSM_DIR/cli/cmd-add-version.lua $PWD "${1}" "${option:1}"
        else
            printf "ArgumentError: the signature is 'cosm upgrade <package name> [--latest, <version>]'. See 'cosm --help'. \n \n"
            exit 1
        fi
    else
        printf "ArgumentError: the signature is 'cosm add <package name> [--latest, <version>]'. See 'cosm --help'. \n \n"
        exit 1
    fi
}

upgrade(){
    if [ "$#" -eq 2 ]; then
        option="${2}"
        if [ "${option}" == "--latest" ]; then
            lua $COSM_DIR/cli/cmd-upgrade-latest.lua $PWD "${1}"
        elif [ "${option:0:1}" == "v" ]; then
            lua $COSM_DIR/cli/cmd-upgrade-version.lua $PWD "${1}" "${option:1}"
        else
            printf "ArgumentError: the signature is 'cosm upgrade <package name> [--latest, v<version>]'. See 'cosm --help'. \n \n"
            exit 1
        fi
    else
        printf "ArgumentError: the signature is 'cosm upgrade <package name> [--latest, v<version>]'. See 'cosm --help'. \n \n"
        exit 1
    fi
}

downgrade(){
    if [ "$#" -eq 2 ]; then
        option="${2}"
        if [ "${option:0:1}" == "v" ]; then
            lua $COSM_DIR/cli/cmd-downgrade.lua $PWD "${1}" "${option:1}"
        else
            printf "ArgumentError: the signature is 'cosm downgrade <package name> v<version>'. See 'cosm --help'. \n \n"
            exit 1
        fi
    else
        printf "ArgumentError: the signature is 'cosm downgrade <package name> v<version>'. See 'cosm --help'. \n \n"
        exit 1
    fi
}

remove(){
    if [ "$#" -eq 1 ]; then
        lua $COSM_DIR/cli/cmd-rm.lua $PWD "${1}"
    else
        printf "ArgumentError: the signature is 'cosm rm <package name>'. See 'cosm --help'. \n \n"
        exit 1
    fi
}

registry_delete(){
    if [ "$#" -eq 2 ]; then
        if [ "$1" == "--force" ]; then
            checkname $2
            lua $COSM_DIR/cli/cmd-registry-delete.lua $2
        elif [ "$2" == "--force" ]; then
            checkname $1
            lua $COSM_DIR/cli/cmd-registry-delete.lua $1
        fi
    elif [ "$#" -eq 1 ]; then
        echo "Are you sure you want to delete $1? [y/n]"
        read yes
        case $yes in
            y)
                lua $COSM_DIR/cli/cmd-registry-delete.lua "${@}"
                ;;
            n)
                # do nothing
                ;;
            *)
                printf "Please verify with 'y' or 'n'.\n \n"
                registry_delete $1
                ;;
        esac
    else
        printf "ArgumentError: the signature is 'cosm registry delete <registry name> [--force]'. See 'cosm --help'.\n \n"
        exit 1
    fi
}

registry(){
    case "$1" in
        status)
            checkname $2
            lua $COSM_DIR/cli/cmd-registry-status.lua "${@:2}"
            ;;
        init) # initialize a registry
            checkname $2
            lua $COSM_DIR/cli/cmd-registry-init.lua "${@:2}"
            ;;
        add)  # add a package to the registry
            lua $COSM_DIR/cli/cmd-registry-add.lua $PWD "${@:2}"
            ;;
        rm)   # registry rm
            checkname $2
            lua $COSM_DIR/cli/cmd-registry-rm.lua $PWD "${@:2}"
            ;;
        delete)
            checkname $2
            registry_delete "${@:2}"
            ;;
        *)      # default
            printf "cosm: '$1' is not a 'cosm registry' subcommand. See 'cosm --help'.\n \n"
            exit 1
            ;;
    esac
}

# cosm register
release(){
    case "$1" in
        --patch|--minor|--major)    # registry add
            release=$1
            lua $COSM_DIR/cli/cmd-release.lua "${release:2}"
            ;;
        *)      # default
            printf "cosm: '$1' is not a 'cosm release' option. See 'cosm --help'.\n \n"
            exit 1
            ;;
    esac
}

# global variable pointing to the .bash_profile or .zprofile
BASH_PROFILE="$(set_bash_profile)"

# create directory structure
create_depot "${HOME}/.cosm" "${BASH_PROFILE}"

# cli - command options
case "$1" in

    # print out version of Cosm
    --version|-v)
        printf "cosm version $VERSION \n"
        ;;

    # Gives an overview of a package or registry when evaluated in the root of a package or registry, respectively.
    status)          # cosm statusd
        status
        ;;
    
    # Evaluate in parent folder of a new package. Adds a new package with name <name> according to a template (in .cosm/templates) of specified language <language>.
    init)    # cosm init
        init "${@:2}" 
        ;;

    # Evaluate in root directory of a package. Add a dependency to a project with <name> and <version>
    add)
        checkname $2
        add "${@:2}"
        ;;
    
    # Evaluate in root directory of a package. Remove a dependency from a project with <name>
    rm)
        checkname $2
        remove "${@:2}"
        ;;

    # Evaluate in root directory of a package. Upgrade a project dependency with <name> to <version>
    upgrade)
        checkname $2
        upgrade "${@:2}"
        ;;

    downgrade)
        checkname $2
        downgrade "${@:2}"
        ;;

    registry)       # cosm registry
        registry "${@:2}"
        ;;

    release)         # cosm release
        release "${@:2}"
        ;;

    *) # default
        printf "cosm: '$1' is not a cosm command. See 'cosm --help'.\n \n"
        exit 1
        ;;
esac

# exit succesfully
exit 0